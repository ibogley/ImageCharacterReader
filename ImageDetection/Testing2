import sys
import cv2
from matplotlib import pyplot as plt
from matplotlib import patches as patches
import os
import numpy as np

img_path = os.path.join(os.getcwd(), 'ImageDetection', 'Images', 'IMG_1966.jpg')

img = cv2.imread(img_path)
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

def detect_characters_opencv(image_path, min_area=30, max_area=2000):
    # Load image
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Threshold to binary image (characters = white, background = black)
    thresh = cv2.adaptiveThreshold(gray, 255,
                                   cv2.ADAPTIVE_THRESH_MEAN_C,
                                   cv2.THRESH_BINARY_INV,
                                   blockSize=15,
                                   C=8)

    # Remove small noise
    kernel = np.ones((2, 2), np.uint8)
    clean = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)

    # Find contours
    contours, _ = cv2.findContours(clean, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    bboxes = []
    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)
        area = w * h

        # Filter out boxes that are too small/large
        if area < min_area or area > max_area:
            continue

        aspect_ratio = w / float(h)
        if 0.2 < aspect_ratio < 1.5:  # rough filter for characters
            bboxes.append((x, y, x+w, y+h))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    return img, bboxes


img, bboxes = detect_characters_opencv(img_path)

# Convert BGR (OpenCV) to RGB (Matplotlib)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Create figure
fig, ax = plt.subplots(figsize=(10, 10))
ax.imshow(img_rgb)

# Draw bounding boxes
for bbox in bboxes:
    x1, y1, x2, y2 = bbox
    rect = patches.Rectangle(
        (x1, y1),
        x2 - x1,
        y2 - y1,
        linewidth=2,
        edgecolor="red",
        facecolor="none"
    )
    ax.add_patch(rect)

plt.title("Detected Character Bounding Boxes")
plt.axis("off")
plt.show()